name: CI / CD with Gradle (SpringBoot Project)

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  CI-CD:

    runs-on: ubuntu-latest

    ## jdk setting
    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'

    ## gradle caching
    - name: Gradle Caching
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    
    ## create application.yml (in prod)
    - name: make application.yml (in prod)
      if: contains(github.ref, 'main')
      run: |
        cd ./src/main/resources
        touch ./application.yml
        echo "${{ secrets.APPLICATION_IN_PROD }}" > ./application.yml
      shell: bash    

    # ## create application.yml (in dev)
    # - name: make application.yml (in dev)
    #   if: contains(github.ref, 'develop')
    #   run: |
    #     cd ./src/main/resources
    #     touch ./application.yml
    #     echo "${{ secrets.APPLICATION_IN_DEV }}" > ./application.yml
    #   shell: bash        

    # ## create application-dev.yml
    # - name: make application-dev.yml
    #   if: contains(github.ref, 'develop')
    #   run: |
    #     cd ./src/main/resources
    #     touch ./application-dev.yml
    #     echo "${{ secrets.APPLICATION_DEV }}" > ./application-dev.yml
    #   shell: bash

    ## create application-prod.yml
    - name: make application-prod.yml
      if: contains(github.ref, 'main')
      run: |
        cd ./src/main/resources
        touch ./application-prod.yml
        echo "${{ secrets.APPLICATION_PROD }}" > ./application-prod.yml
      shell: bash

    ## create aws.yml
    - name: make aws-prod.yml
      run: |
        cd ./src/main/resources
        touch ./aws-prod.yml
        echo "${{ secrets.AWS_PROD }}" > ./aws-prod.yml
      shell: bash

    ## create oauth.yml
    - name: make oauth-prod.yml
      run: |
        cd ./src/main/resources
        touch ./oauth-prod.yml
        echo "${{ secrets.OAUTH_PROD }}" > ./oauth-prod.yml
      shell: bash

    # ## Build 
    # - name: Build with Gradle
    #   uses: gradle/gradle-build-action@67421db6bd0bf253fb4bd25b31ebb98943c375e1
    #   with:
    #     arguments: build

    ## gradle build
    - name: Build with Gradle
      run: ./gradlew build -x test
    
    ## ============ CD ============

    ## docker build & push to production
    - name: Docker build & push to prod
      if: contains(github.ref, 'main')
      run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -f Dockerfile-prod -t ${{ secrets.DOCKER_REPO }}/bh-prod .
          docker push ${{ secrets.DOCKER_REPO }}/bh-prod

    # ## docker build & push to develop
    # - name: Docker build & push to dev
    #   if: contains(github.ref, 'develop')
    #   run: |
    #       docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
    #       docker build -f Dockerfile-dev -t ${{ secrets.DOCKER_REPO }}/bh-dev .
    #       docker push ${{ secrets.DOCKER_REPO }}/bh-dev

    ## deploy to prod (ap-northeast-2a)
    - name: Deploy to prod (ap-northeast-2a)
      uses: appleboy/ssh-action@master
      id: deploy-prod-a
      if: contains(github.ref, 'main')
      with:
        host: ${{ secrets.EC2_HOST_IN_A_PROD }}
        username: ${{ secrets.EC2_IN_A_USERNAME }}
        password: ${{ secrets.EC2_IN_A_PASSWORD }}
        port: 22
        script: |
            sudo docker rm -f $(docker ps -qa)
            sudo docker pull ${{ secrets.DOCKER_REPO }}/bh-prod 
            docker image prune -f

    ## deploy to prod (ap-northeast-2c)
    - name: Deploy to prod (ap-northeast-2c)
      uses: appleboy/ssh-action@master
      id: deploy-prod-c
      if: contains(github.ref, 'main')
      with:
        host: ${{ secrets.EC2_HOST_IN_C_PROD }}
        username: ${{ secrets.EC2_IN_C_USERNAME }}
        password: ${{ secrets.EC2_IN_C_PASSWORD }}
        port: 22
        script: |
            sudo docker rm -f $(docker ps -qa)
            sudo docker pull ${{ secrets.DOCKER_REPO }}/bh-prod
            docker image prune -f

    # ## deploy to develop
    # - name: Deploy to dev
    #   uses: appleboy/ssh-action@master
    #   id: deploy-dev
    #   if: contains(github.ref, 'develop')
    #   with:
    #     host: ${{ secrets.HOST_DEV }}
    #     username: ${{ secrets.USERNAME }}
    #     password: ${{ secrets.PASSWORD }}
    #     port: 22
    #     #key: ${{ secrets.PRIVATE_KEY }}
    #     script: |
    #         sudo docker rm -f $(docker ps -qa)
    #         sudo docker pull ${{ secrets.DOCKER_REPO }}/bh-dev
    #         docker-compose up -d
    #         docker image prune -f
    
